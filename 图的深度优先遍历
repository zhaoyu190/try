#include<stdio.h> 
#include<string.h>
typedef struct {
    int vexnum,arcnum;//顶点的个数，边的个数
    char arcs[255][255];//图的邻接矩阵
}Graph;int u=0;
bool visited[50];
void DFS(Graph G,int v)
{
  if (u>0)printf(" ");
    visited[v]= true; //从V开始访问，flag它
    printf("%d",v+1);;  //打印出V
    for(int j=0;j<G.vexnum;j++) {
        if(G.arcs[v][j]=='1'&&visited[j]==false){ //这里可以获得V未访问过的邻接点
        u++ ;
            DFS(G,j);} }//递归调用，如果所有节点都被访问过，就回溯，而不再调用这里的DFS
}

void DFSTraverse(Graph G) {
    for (int v = 0; v <G.vexnum; v++){
        visited[v] = false; }//刚开始都没有被访问过

    for (int v = 0; v <G.vexnum; ++v){
        if (visited[v] == false) //从没有访问过的第一个元素来遍历图
            DFS(G, v);}
}
 int main(){
   int y=0;
   while(1){go:u=0;
   Graph G;
   char a[255][255],str[255][255];
   memset(a, 0, sizeof a);  
   memset(str, 0, sizeof str); 
   int n=-1,f=0,g=0;
   do{n++;
if(fgets(a[n], 100, stdin)==NULL){goto end;}
//if(scanf("%s",a[n])==EOF){goto end;}
if(a[n][0]=='\n')goto go;
   }while(a[n][2*n+1]!='\n');n=n+1;	if(y>0)printf("\n");
   //printf("%d\n",n);
   G.vexnum=n;
for(int b=0;b<n;b++){
  for(int c=0;c<2*n-1;c++){if(a[b][c]!=' ')   {
  G.arcs[f][g]=a[b][c];g++;}}
  f++;g=0;
}
DFSTraverse(G);y++;
//printf("\n");
}
  end:


 ;
 }
